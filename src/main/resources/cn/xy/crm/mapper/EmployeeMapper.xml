<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.xy.crm.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="cn.xy.crm.domain.Employee">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="realname" property="realname" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="tel" property="tel" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="inputtime" property="inputtime" jdbcType="DATE"/>
        <result column="state" property="state" jdbcType="BIT"/>
        <result column="admin" property="admin" jdbcType="BIT"/>
        <association property="dept" javaType="cn.xy.crm.domain.Department" columnPrefix="dept_">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
        </association>
        <collection property="roleList" column="id" ofType="cn.xy.crm.domain.Role"
                    select="cn.xy.crm.mapper.RoleMapper.queryRoleByEid"/>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from employee where id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteRelation">
        delete from employee_role where e_id = #{id}
    </delete>
    <insert id="insert" parameterType="cn.xy.crm.domain.Employee" useGeneratedKeys="true" keyProperty="id">
        insert into employee (username, realname, password,
          tel, email, dept_id,
          inputtime, state, admin)
        values (#{username,jdbcType=VARCHAR}, #{realname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
          #{tel,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{dept.id,jdbcType=BIGINT},
          #{inputtime,jdbcType=DATE}, #{state,jdbcType=BIT}, #{admin,jdbcType=BIT})
    </insert>
    <insert id="addRelation">
        insert into employee_role (e_id, r_id) values (#{eid}, #{rid})
    </insert>
    <update id="updateByPrimaryKey" parameterType="cn.xy.crm.domain.Employee">
        update employee
        set username = #{username,jdbcType=VARCHAR},
          realname = #{realname,jdbcType=VARCHAR},
          tel = #{tel,jdbcType=VARCHAR},
          email = #{email,jdbcType=VARCHAR},
          dept_id = #{dept.id,jdbcType=BIGINT}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateEmployeeState">
       update employee set state = 0 where id = #{id}
    </update>
    <sql id="column_sql">
        e.id, e.username,e.realname,e. password, e.tel, e.email, d.id as dept_id, d.name as dept_name, e.inputtime,
        e.state, e.admin
    </sql>
    <sql id="condition_sql">
        <where>
            <if test="keyword!=null">
                and (username like concat('%', #{keyword}, '%') or realname like concat("%", #{keyword}, "%"))
            </if>
            <if test="beginDate !=null">
                and e.inputtime &gt;= #{beginDate}
            </if>
            <if test="endDate !=null">
                and e.inputtime &lt;= #{endDate}
            </if>
            <if test="state !=null ">
                and e.state = #{state}
            </if>
        </where>
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="column_sql"/>
        from employee as e left join department as d on e.dept_id = d.id where e.id = #{id,jdbcType=BIGINT}
    </select>

    <select id="selectAllCount" resultType="long">
        select count(*)
        from employee e left join department d on e.dept_id=d.id
    </select>

    <select id="selectAll" resultMap="BaseResultMap">
        select
        <include refid="column_sql"/>
        from employee as e left join department as d on e.dept_id = d.id
    </select>
    <select id="queryByLogin" resultType="cn.xy.crm.domain.Employee">
        select * from employee where username = #{username} and password = #{password}
    </select>
    <select id="queryByConditionCount" resultType="java.lang.Long">
        select count(*) from employee e
        <include refid="condition_sql"/>
    </select>
    <select id="queryByCondition" resultMap="BaseResultMap">
        select <include refid="column_sql"/>
        from employee as e left join department as d on e.dept_id = d.id
        <include refid="condition_sql"/>
        <if test="page!=null">
            limit #{start}, #{rows}
        </if>
    </select>
    <select id="queryRoleIdsByEmpId" resultType="java.lang.Long">
        select r_id from employee_role where e_id = #{id}
    </select>
    <select id="listManager" resultMap="BaseResultMap">
        select <include refid="column_sql"/>
        from employee as e left join department as d on e.dept_id = d.id
    </select>

    <select id="selectByPotential" resultType="Employee">
      select  id, username from employee where id in(select inChargeuser_id from customer where status =0)
    </select>
    <select id="selectByCustomer" resultType="Employee">
      select  id, username from employee where id in(select inChargeuser_id from customer where status =1)
    </select>
    <select id="selectByInCharge" resultType="Employee">
        select * from employee where id in (select DISTINCT inchargeUser_id from customer)
    </select>
</mapper>